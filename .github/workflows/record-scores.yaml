name: Record scores

on:
  pull_request_target:
    branches: main
    types:
      - closed

env:
  PR_NUMBER: ${{ github.event.pull_request.number }}
  PR_AUTHOR: ${{ github.event.pull_request.user.login }}

jobs:
  read-pr-config:
    name: Read pull request config
    runs-on: ubuntu-latest
    outputs:
      run-scorer: ${{ steps.save-env.outputs.run-scorer }} # Boolean to run the record-scores job
    steps:
      - name: Checkout pull request target
        uses: actions/checkout@v3
      - name: Install Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Download pull request config from score-submission artifacts 
        uses: dawidd6/action-download-artifact@v2.21.1
        with:
          workflow: score-submission.yaml
          pr: ${{ env.PR_NUMBER }}
          name: pr_config.json
          path: submissions/${{ env.PR_AUTHOR }}
      - name: Set pr_config.json entries as environment variables
        run: python3 .github/workflows/utils/print_json_as_env.py
               submissions/${{ env.PR_AUTHOR }}/pr_config.json
               --validate-pr-config >> ${{ github.env }}
      - name: Save scorer environment to job output
        id: save-env
        run: echo '::set-output name=run-scorer::${{ env.RUN_SCORER }}'

  record-scores:
    name: Record scores
    runs-on: ubuntu-latest
    needs: read-pr-config
    if: ${{ needs.read-pr-config.outputs.run-scorer == 'true' && github.event.pull_request.merged == true && github.ref_type == 'branch' && github.ref_name == 'main' && github.repository_owner == 'reepoi' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install ivcurves requirements
        run: pip3 install -r requirements.txt
      - name: Download overall_scores.csv
        uses: dawidd6/action-download-artifact@v2.21.1
        with:
          workflow: score-submission.yaml
          pr: ${{ env.PR_NUMBER }}
          name: overall_scores.csv
      - name: Validate and record scores
        run: python3 .github/workflows/utils/record_scores.py
               --pr-author ${{ env.PR_AUTHOR }}
               --pr-number ${{ env.PR_NUMBER }}
               --pr-closed-at ${{ github.event.pull_request.closed_at }}
               --overall-scores-path overall_scores.csv
               --database-path scores_database.json
      - name: Commit and push scores database
        id: commit-scores
        run: |
          git config user.name 'GitHub'
          git config user.email 'github@ivcurves'
          git add scores_database.json
          git diff-index --quiet HEAD # exit code 0 if no changes, 1 if changes
          export DATABASE_CHANGED=$? # get exit code
          if [[ $DATABASE_CHANGED == 1 ]]; then
            git commit -m 'Update scores database'
            git push origin main
          fi
          echo '::set-output name=update-docs::$DATABASE_CHANGED'
      - name: If database was updated, build Sphinx docs
        if: ${{ steps.commit-scores.update-docs == 1 }}
        uses: ./.github/workflows/build-sphinx-docs.yaml

